{"version":3,"file":"react-currency-input.min.js","sources":["../src/mask.js","../src/index.js"],"sourcesContent":["\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\n    // provide some default values and arg validation.\n    if (precision < 0) { precision = 0; } // precision cannot be negative\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\n    \n    if (value === null || value===undefined) {\n          return {\n              value: 0,\n              maskedValue: ''\n          };\n     }\n  \n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n    if (value.length == 0) {\n        return {\n            value: 0,\n            maskedValue: ''\n        };\n    }\n\n\n    // extract digits. if no digits, fill in a zero.\n    let digits = value.match(/\\d/g) || ['0'];\n    \n    let numberIsNegative = false;\n    if (allowNegative) {\n        let negativeSignCount = (value.match(/-/g) || []).length;\n        // number will be negative if we have an odd number of \"-\"\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n        // and making a negative number positive, respectively)\n        numberIsNegative = negativeSignCount % 2 === 1;\n        \n        // if every digit in the array is '0', then the number should never be negative\n        let allDigitsAreZero = true;\n        for (let idx=0; idx < digits.length; idx += 1) {\n            if(digits[idx] !== '0') {\n                allDigitsAreZero = false;\n                break;\n            }\n        }\n        if (allDigitsAreZero) {\n            numberIsNegative = false;\n        }\n    }\n\n    // zero-pad a input\n    while (digits.length <= precision) { digits.unshift('0'); }\n\n    if (precision > 0) {\n        // add the decimal separator\n        digits.splice(digits.length - precision, 0, \".\");\n    }\n\n    // clean up extraneous digits like leading zeros.\n    digits = Number(digits.join('')).toFixed(precision).split('');\n    let raw = Number(digits.join(''));\n\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\n    if (precision > 0) {\n        // set the final decimal separator\n        digits[decimalpos] = decimalSeparator;\n    } else {\n        // when precision is 0, there is no decimal separator.\n        decimalpos = digits.length;\n    }\n\n    // add in any thousand separators\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\n        digits.splice(x, 0, thousandSeparator);\n    }\n\n    // if we have a prefix or suffix, add them in.\n    if (prefix.length > 0) { digits.unshift(prefix); }\n    if (suffix.length > 0) { digits.push(suffix); }\n\n    // if the number is negative, insert a \"-\" to\n    // the front of the array and negate the raw value\n    if (allowNegative && numberIsNegative) {\n        digits.unshift('-');\n        raw = -raw;\n    }\n\n    return {\n        value: raw,\n        maskedValue: digits.join('').trim()\n    };\n}\n","import PropTypes from 'prop-types';\nimport React, { Component }  from 'react'\nimport ReactDOM from 'react-dom'\nimport mask from './mask.js'\n\n// IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\nNumber.parseFloat = parseFloat;\n\nclass CurrencyInput extends Component {\n    constructor(props) {\n        super(props);\n        this.prepareProps = this.prepareProps.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.setSelectionRange = this.setSelectionRange.bind(this);\n        this.state = this.prepareProps(this.props);\n\n        this.inputSelectionStart = 0;\n        this.inputSelectionEnd = 0;\n    }\n\n\n    /**\n     * Exposes the current masked value.\n     *\n     * @returns {String}\n     */\n    getMaskedValue() {\n        return this.state.maskedValue;\n    }\n\n\n    /**\n     * General function used to cleanup and define the final props used for rendering\n     * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n     */\n    prepareProps(props) {\n        let customProps = {...props}; // babeljs converts to Object.assign, then polyfills.\n        delete customProps.onChange;\n        delete customProps.onChangeEvent;\n        delete customProps.value;\n        delete customProps.decimalSeparator;\n        delete customProps.thousandSeparator;\n        delete customProps.precision;\n        delete customProps.inputType;\n        delete customProps.allowNegative;\n        delete customProps.allowEmpty;\n        delete customProps.prefix;\n        delete customProps.suffix;\n        delete customProps.autoFocus;\n\n        let initialValue = props.value;\n        if (initialValue === null) {\n            initialValue = props.allowEmpty? null : '';\n        }else{\n\n            if (typeof initialValue == 'string') {\n                // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n                // Now they have two problems.\n\n                // Strip out thousand separators, prefix, and suffix, etc.\n                if (props.thousandSeparator === \".\"){\n                    // special handle the . thousand separator\n                    initialValue = initialValue.replace(/\\./g, '');\n                }\n\n                if (props.decimalSeparator != \".\"){\n                    // fix the decimal separator\n                    initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\n                }\n\n                //Strip out anything that is not a digit, -, or decimal separator\n                initialValue = initialValue.replace(/[^0-9-.]/g, '');\n\n                // now we can parse.\n                initialValue = Number.parseFloat(initialValue);\n            }\n            initialValue = Number(initialValue).toLocaleString(undefined, {\n                style                : 'decimal',\n                minimumFractionDigits: props.precision,\n                maximumFractionDigits: props.precision\n            })\n\n        }\n\n        const { maskedValue, value } = mask(\n            initialValue,\n            props.precision,\n            props.decimalSeparator,\n            props.thousandSeparator,\n            props.allowNegative,\n            props.prefix,\n            props.suffix\n        );\n\n        return { maskedValue, value, customProps };\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\n     *\n     * @param nextProps\n     * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState(this.prepareProps(nextProps));\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n     */\n    componentDidMount(){\n        let node = ReactDOM.findDOMNode(this.theInput);\n\n        let selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\n        let selectionStart = Math.min(node.selectionStart, selectionEnd);\n        //console.log(\"normal\", selectionStart, selectionEnd);\n        this.setSelectionRange(node, selectionStart, selectionEnd);\n\n    }\n\n\n    /**\n     * Component lifecycle function\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n     */\n    componentWillUpdate() {\n        let node = ReactDOM.findDOMNode(this.theInput);\n        this.inputSelectionStart = node.selectionStart;\n        this.inputSelectionEnd = node.selectionEnd;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n     */\n    componentDidUpdate(prevProps, prevState){\n\n        let node = ReactDOM.findDOMNode(this.theInput);\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n        let selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\n        let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\n\n        let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n        let separatorsRegex = new RegExp(this.props.decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\n        let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\n        let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\n        let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n\n        selectionEnd = selectionEnd + adjustment;\n        selectionStart = selectionStart + adjustment;\n\n        let baselength = this.props.suffix.length\n            + this.props.prefix.length\n            + this.props.decimalSeparator.length\n            + Number(this.props.precision)\n            + 1; // This is to account for the default '0' value that comes before the decimal separator\n\n        if (this.state.maskedValue.length == baselength){\n            // if we are already at base length, position the cursor at the end.\n            selectionEnd = this.theInput.value.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        }\n\n        this.setSelectionRange(node, selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    /**\n     * Set selection range only if input is in focused state\n     * @param node DOMElement\n     * @param start number\n     * @param end number\n     */\n    setSelectionRange(node, start, end) {\n        if (document.activeElement === node) {\n            node.setSelectionRange(start, end);\n        }\n    }\n\n\n    /**\n     * onChange Event Handler\n     * @param event\n     */\n    handleChange(event) {\n        event.preventDefault();\n        let { maskedValue, value } = mask(\n            event.target.value,\n            this.props.precision,\n            this.props.decimalSeparator,\n            this.props.thousandSeparator,\n            this.props.allowNegative,\n            this.props.prefix,\n            this.props.suffix\n        );\n\n        event.persist();  // fixes issue #23\n\n        this.setState({ maskedValue, value }, () => {\n            this.props.onChange(maskedValue, value, event);\n            this.props.onChangeEvent(event, maskedValue, value);\n        });\n    }\n\n\n    /**\n     * onFocus Event Handler\n     * @param event\n     */\n    handleFocus(event) {\n        //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n        let selectionEnd = this.theInput.value.length - this.props.suffix.length;\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n        event.target.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    handleBlur(event) {\n        this.inputSelectionStart = 0;\n        this.inputSelectionEnd = 0;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/component-specs.html#render\n     */\n    render() {\n        return (\n            <input\n                ref={(input) => { this.theInput = input; }}\n                autoFocus={this.props.autoFocus}\n                type={this.props.inputType}\n                value={this.state.maskedValue}\n                onChange={this.handleChange}\n                onFocus={this.handleFocus}\n                onMouseUp={this.handleFocus}\n                {...this.state.customProps}\n            />\n        )\n    }\n}\n\n\n\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\nCurrencyInput.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    decimalSeparator: PropTypes.string,\n    thousandSeparator: PropTypes.string,\n    precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inputType: PropTypes.string,\n    allowNegative: PropTypes.bool,\n    allowEmpty: PropTypes.bool,\n    prefix: PropTypes.string,\n    suffix: PropTypes.string\n};\n\n\nCurrencyInput.defaultProps = {\n    onChange: function(maskValue, value, event) {/*no-op*/},\n    onChangeEvent: function(event, maskValue, value) {/*no-op*/},\n    value: '0',\n    decimalSeparator: '.',\n    thousandSeparator: ',',\n    precision: '2',\n    inputType: 'text',\n    allowNegative: false,\n    prefix: '',\n    suffix: ''\n};\n\n\nexport default CurrencyInput\nexport {mask}\n"],"names":["mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","maskedValue","String","length","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","parseFloat","CurrencyInput","props","super","this","prepareProps","bind","handleChange","handleFocus","setSelectionRange","state","inputSelectionStart","inputSelectionEnd","getMaskedValue","customProps","Object","onChange","onChangeEvent","inputType","allowEmpty","autoFocus","initialValue","replace","RegExp","toLocaleString","undefined","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentDidMount","node","ReactDOM","findDOMNode","theInput","selectionEnd","Math","min","selectionStart","componentWillUpdate","componentDidUpdate","prevProps","prevState","isNegative","minPos","max","regexEscapeRegex","separatorsRegex","currSeparatorCount","prevSeparatorCount","adjustment","baselength","start","end","document","activeElement","event","preventDefault","target","persist","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","Component","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}